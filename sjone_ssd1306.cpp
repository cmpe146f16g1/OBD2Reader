/*
 * sjone_ssd1306.cpp
 *
 * CMPE146: Fall 2016
 * Samuel Palomino
 * OLED (SSD1360) Display Driver
 * Design inspired by Adafruit's SSD1306 Driver:
 * 		https://github.com/adafruit/Adafruit_SSD1306
 */

#include <stdlib.h>
#include "sjone_ssd1306.h"

/*
 * ASCII 5x7 Font
 * 2D array of hex entries that make up the font supported by the display.
 * Credits:
 * 	http://sunge.awardspace.com/glcd-sd/node4.html
 */
static unsigned char letterBank[96][5] = {
	{0x00, 0x00, 0x00, 0x00, 0x00},// (space)
	{0x00, 0x00, 0x5F, 0x00, 0x00},// !
	{0x00, 0x07, 0x00, 0x07, 0x00},// "
	{0x14, 0x7F, 0x14, 0x7F, 0x14},// #
	{0x24, 0x2A, 0x7F, 0x2A, 0x12},// $
	{0x23, 0x13, 0x08, 0x64, 0x62},// %
	{0x36, 0x49, 0x55, 0x22, 0x50},// &
	{0x00, 0x05, 0x03, 0x00, 0x00},// '
	{0x00, 0x1C, 0x22, 0x41, 0x00},// (
	{0x00, 0x41, 0x22, 0x1C, 0x00},// )
	{0x08, 0x2A, 0x1C, 0x2A, 0x08},// *
	{0x08, 0x08, 0x3E, 0x08, 0x08},// +
	{0x00, 0x50, 0x30, 0x00, 0x00},// ,
	{0x08, 0x08, 0x08, 0x08, 0x08},// -
	{0x00, 0x60, 0x60, 0x00, 0x00},// .
	{0x20, 0x10, 0x08, 0x04, 0x02},// /
	{0x3E, 0x51, 0x49, 0x45, 0x3E},// 0
	{0x00, 0x42, 0x7F, 0x40, 0x00},// 1
	{0x42, 0x61, 0x51, 0x49, 0x46},// 2
	{0x21, 0x41, 0x45, 0x4B, 0x31},// 3
	{0x18, 0x14, 0x12, 0x7F, 0x10},// 4
	{0x27, 0x45, 0x45, 0x45, 0x39},// 5
	{0x3C, 0x4A, 0x49, 0x49, 0x30},// 6
	{0x01, 0x71, 0x09, 0x05, 0x03},// 7
	{0x36, 0x49, 0x49, 0x49, 0x36},// 8
	{0x06, 0x49, 0x49, 0x29, 0x1E},// 9
	{0x00, 0x36, 0x36, 0x00, 0x00},// :
	{0x00, 0x56, 0x36, 0x00, 0x00},// ;
	{0x00, 0x08, 0x14, 0x22, 0x41},// <
	{0x14, 0x14, 0x14, 0x14, 0x14},// =
	{0x41, 0x22, 0x14, 0x08, 0x00},// >
	{0x02, 0x01, 0x51, 0x09, 0x06},// ?
	{0x32, 0x49, 0x79, 0x41, 0x3E},// @
	{0x7E, 0x11, 0x11, 0x11, 0x7E},// A
	{0x7F, 0x49, 0x49, 0x49, 0x36},// B
	{0x3E, 0x41, 0x41, 0x41, 0x22},// C
	{0x7F, 0x41, 0x41, 0x22, 0x1C},// D
	{0x7F, 0x49, 0x49, 0x49, 0x41},// E
	{0x7F, 0x09, 0x09, 0x01, 0x01},// F
	{0x3E, 0x41, 0x41, 0x51, 0x32},// G
	{0x7F, 0x08, 0x08, 0x08, 0x7F},// H
	{0x00, 0x41, 0x7F, 0x41, 0x00},// I
	{0x20, 0x40, 0x41, 0x3F, 0x01},// J
	{0x7F, 0x08, 0x14, 0x22, 0x41},// K
	{0x7F, 0x40, 0x40, 0x40, 0x40},// L
	{0x7F, 0x02, 0x04, 0x02, 0x7F},// M
	{0x7F, 0x04, 0x08, 0x10, 0x7F},// N
	{0x3E, 0x41, 0x41, 0x41, 0x3E},// O
	{0x7F, 0x09, 0x09, 0x09, 0x06},// P
	{0x3E, 0x41, 0x51, 0x21, 0x5E},// Q
	{0x7F, 0x09, 0x19, 0x29, 0x46},// R
	{0x46, 0x49, 0x49, 0x49, 0x31},// S
	{0x01, 0x01, 0x7F, 0x01, 0x01},// T
	{0x3F, 0x40, 0x40, 0x40, 0x3F},// U
	{0x1F, 0x20, 0x40, 0x20, 0x1F},// V
	{0x7F, 0x20, 0x18, 0x20, 0x7F},// W
	{0x63, 0x14, 0x08, 0x14, 0x63},// X
	{0x03, 0x04, 0x78, 0x04, 0x03},// Y
	{0x61, 0x51, 0x49, 0x45, 0x43},// Z
	{0x00, 0x00, 0x7F, 0x41, 0x41},// [
	{0x02, 0x04, 0x08, 0x10, 0x20},// "\"
	{0x41, 0x41, 0x7F, 0x00, 0x00},// ]
	{0x04, 0x02, 0x01, 0x02, 0x04},// ^
	{0x40, 0x40, 0x40, 0x40, 0x40},// _
	{0x00, 0x01, 0x02, 0x04, 0x00},// `
	{0x20, 0x54, 0x54, 0x54, 0x78},// a
	{0x7F, 0x48, 0x44, 0x44, 0x38},// b
	{0x38, 0x44, 0x44, 0x44, 0x20},// c
	{0x38, 0x44, 0x44, 0x48, 0x7F},// d
	{0x38, 0x54, 0x54, 0x54, 0x18},// e
	{0x08, 0x7E, 0x09, 0x01, 0x02},// f
	{0x08, 0x14, 0x54, 0x54, 0x3C},// g
	{0x7F, 0x08, 0x04, 0x04, 0x78},// h
	{0x00, 0x44, 0x7D, 0x40, 0x00},// i
	{0x20, 0x40, 0x44, 0x3D, 0x00},// j
	{0x00, 0x7F, 0x10, 0x28, 0x44},// k
	{0x00, 0x41, 0x7F, 0x40, 0x00},// l
	{0x7C, 0x04, 0x18, 0x04, 0x78},// m
	{0x7C, 0x08, 0x04, 0x04, 0x78},// n
	{0x38, 0x44, 0x44, 0x44, 0x38},// o
	{0x7C, 0x14, 0x14, 0x14, 0x08},// p
	{0x08, 0x14, 0x14, 0x18, 0x7C},// q
	{0x7C, 0x08, 0x04, 0x04, 0x08},// r
	{0x48, 0x54, 0x54, 0x54, 0x20},// s
	{0x04, 0x3F, 0x44, 0x40, 0x20},// t
	{0x3C, 0x40, 0x40, 0x20, 0x7C},// u
	{0x1C, 0x20, 0x40, 0x20, 0x1C},// v
	{0x3C, 0x40, 0x30, 0x40, 0x3C},// w
	{0x44, 0x28, 0x10, 0x28, 0x44},// x
	{0x0C, 0x50, 0x50, 0x50, 0x3C},// y
	{0x44, 0x64, 0x54, 0x4C, 0x44},// z
	{0x00, 0x08, 0x36, 0x41, 0x00},// {
	{0x00, 0x00, 0x7F, 0x00, 0x00},// |
	{0x00, 0x41, 0x36, 0x08, 0x00},// }
	{0x08, 0x08, 0x2A, 0x1C, 0x08},// ->
	{0x08, 0x1C, 0x2A, 0x08, 0x08} // <-
};

/*
 * SJSU Logo bitmap, custom made with added font.
 * https://upload.wikimedia.org/wikipedia/en/thumb/2/27/San_Jose_State_Spartans_Logo.svg/996px-San_Jose_State_Spartans_Logo.svg.png
 */
static uint8_t spartanLogo[(SSD1306_DISPLAY_WIDTH * SSD1306_DISPLAY_HEIGHT) / 8] = {
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x7F,0xFF,
		0xBF,0x9F,0x1F,0x0F,0x0F,0x0F,0x0F,0x47,0x07,0x6F,0xFB,0xF3,0xC3,0xC3,0x03,0x03,
		0x03,0x19,0x81,0xE1,0xFB,0xFF,0xFD,0xE1,0x01,0x03,0x01,0x23,0x23,0xC3,0xE3,0xF3,
		0xFF,0x87,0x07,0x07,0x0F,0x0F,0x8F,0x1F,0x1F,0x3F,0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,

		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0x7F,0x3F,0x3F,0x6F,0xE7,0xE3,0xE1,0xC1,0xC0,0xC0,0x84,0x81,
		0x87,0x1F,0xFF,0xFE,0xFE,0xFC,0xB8,0xF8,0xF0,0xF3,0xFF,0xFF,0x7F,0x5F,0xFF,0x1E,
		0xFC,0x3C,0x3F,0x7F,0x5F,0x3F,0x57,0x3F,0x3F,0xFC,0x7C,0x3E,0x7F,0xDF,0x6F,0xFF,
		0xFF,0xF4,0xE0,0xF8,0xF9,0x7C,0xFE,0xFE,0xFF,0x1F,0x07,0x00,0xA0,0x80,0x90,0xC1,
		0xC3,0xE7,0x6F,0x3F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,

		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xE7,0xE1,0xE0,0xE0,0xE0,0xE0,0xE2,0xE4,0xE1,0xE3,0xEF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFB,0x9F,0xAF,0x0F,0x07,0x0B,0x01,0x02,0x01,0x00,0x01,0x20,0x00,0x10,0x00,
		0x18,0x08,0x08,0x80,0x88,0x08,0x88,0x18,0x88,0x18,0x18,0x10,0x18,0x30,0x30,0x60,
		0x61,0xE2,0xC0,0xC3,0x85,0x07,0x07,0x1F,0x5F,0x37,0x6F,0xFB,0xFF,0xFF,0xCF,0xCF,
		0xE3,0xC1,0xC0,0xE0,0xE0,0xE8,0xE0,0x61,0x27,0x3F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,

		0xFF,0xFB,0xF1,0xE0,0xC6,0xCF,0x8E,0x9E,0x1C,0x1C,0xFF,0xFF,0xFF,0xFF,0xEE,0x00,
		0x00,0xFF,0xFF,0xFF,0xF1,0xE0,0xE6,0xC6,0x8E,0x8E,0x9E,0x18,0x3F,0xFF,0xFF,0xD6,
		0x00,0x00,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xDE,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0x7F,0x3F,0x1F,0x07,0x03,0xC1,0xE0,0xB0,0xB8,0xF8,0x6C,0xF6,0xDE,0xFD,0x9A,0xFF,
		0xFF,0x6B,0x5F,0xFA,0x7F,0xEA,0xB7,0xCE,0x7F,0xE9,0xBF,0xDA,0xA8,0xBE,0xFE,0xA8,
		0xF0,0x60,0x81,0x01,0x03,0x07,0x1E,0x3C,0xF8,0xF0,0xC0,0x01,0x03,0x1D,0xBE,0x7F,
		0xFF,0x77,0xF7,0xE3,0xE1,0xF1,0xE0,0xE0,0xE0,0xE0,0xE0,0x43,0xDF,0xFF,0xFF,0xFF,

		0xFF,0xFE,0xFC,0xFD,0xFF,0xFB,0xFB,0xFD,0xFC,0xFE,0xFF,0xFF,0xFC,0xFD,0xF9,0xFC,
		0xFE,0xFF,0xFF,0xFF,0xFC,0xFD,0xFD,0xFB,0xFB,0xFD,0xFD,0xFC,0xFE,0xFF,0xFF,0xFF,
		0xFE,0xFC,0xFD,0xF9,0xF9,0xFF,0xFF,0xFD,0xFE,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x0F,0x03,0xC1,
		0xE0,0xE0,0x70,0x38,0x39,0x3C,0x3C,0x1C,0x3C,0x9C,0x1C,0x9C,0x0C,0xDC,0x8C,0xCC,
		0x65,0xC0,0x60,0xF0,0xD0,0x78,0xD4,0xFC,0x6B,0xED,0x57,0xFD,0xFF,0x4A,0xEB,0x5E,
		0xDF,0x85,0x9F,0x00,0x00,0x00,0x00,0x00,0x83,0xFF,0xFF,0xF8,0xE0,0xA0,0x8D,0xFF,
		0xDF,0xFF,0xBB,0xF3,0xF3,0xE3,0xE1,0xE1,0xC0,0xE0,0x80,0x80,0xF4,0xFF,0xFF,0xFF,

		0xBF,0x0F,0x07,0xA3,0xFB,0xFB,0xFD,0xFD,0xFD,0xFF,0xFB,0xF3,0xFF,0xFF,0xFF,0x81,
		0x11,0xE1,0x87,0x0F,0x7F,0xFF,0xFF,0x7F,0x9F,0xE7,0x41,0x01,0x01,0xFF,0xFF,0xFF,
		0xB7,0x01,0x01,0xBD,0xBD,0xBD,0x93,0x81,0xC7,0xFF,0xFF,0x7D,0x01,0x01,0xBF,0x9D,
		0xFD,0xBD,0x1D,0xF9,0xFF,0xFF,0xFF,0xFF,0xFF,0xE7,0xF1,0xF8,0xFC,0xFE,0xFF,0xFF,
		0x0F,0x03,0x00,0x00,0x80,0xF0,0xDE,0x7B,0x7F,0xD2,0xEF,0xB6,0xDD,0xFB,0x9F,0xFA,
		0xFB,0xBF,0x57,0xFE,0x77,0x3F,0x2E,0x3B,0x3D,0x07,0x1D,0x0F,0x07,0x1E,0x0B,0x0D,
		0x0E,0x0C,0x01,0x01,0x02,0x03,0x06,0x06,0x1F,0x1F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFF,
		0xF9,0xF9,0xF1,0xE1,0xD1,0x81,0x01,0x01,0x81,0xE1,0xF1,0xFF,0xFF,0xFF,0xFF,0xFF,

		0xFF,0xFE,0xFC,0xF8,0xF1,0xF7,0xF7,0xF7,0xF7,0xFF,0xFB,0xFF,0xFF,0xFF,0xFF,0xF2,
		0xF9,0xFF,0xFF,0xFE,0xFC,0xF0,0xFC,0xFE,0xFF,0xFF,0xF3,0xF0,0xF0,0xFF,0xFF,0xFF,
		0xF3,0xF0,0xF0,0xF7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xF0,0xF3,0xFF,
		0xF7,0xFF,0xF7,0xF3,0xFB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x0F,0x03,0x00,
		0x00,0x00,0x00,0x38,0x3F,0x12,0x1F,0x0E,0x0D,0x0F,0x83,0x87,0xC7,0xC1,0xC1,0xE1,
		0xF1,0xF0,0xF0,0xF8,0xF8,0xFC,0xFC,0xFE,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFE,0xFE,0xFE,0xFC,0xFC,0xF8,0xF8,0xF0,0xF0,0xF0,0xF1,0xE3,0xE3,
		0xE7,0xCF,0xDF,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,

		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x9F,0xC3,0xC0,0xC0,0xE0,0xF0,
		0xF0,0xF0,0xF8,0xF8,0xFC,0xFE,0xFE,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
};

/*
 * Buffer contains the Adafruit Logo as default data.
 * This logo must be presented at boot up as requested by Adafruit.
 * https://www.adafruit.com/
 */
static uint8_t buffer[(SSD1306_DISPLAY_WIDTH * SSD1306_DISPLAY_HEIGHT)/ 8] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
		0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
		0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF,

		0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
		0x80, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x8C, 0x8E, 0x84, 0x00, 0x00, 0x80, 0xF8,
		0xF8, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80,
		0x00, 0xE0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xC7, 0x01, 0x01,
		0x01, 0x01, 0x83, 0xFF, 0xFF, 0x00, 0x00, 0x7C, 0xFE, 0xC7, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFF,
		0xFF, 0xFF, 0x00, 0x38, 0xFE, 0xC7, 0x83, 0x01, 0x01, 0x01, 0x83, 0xC7, 0xFF, 0xFF, 0x00, 0x00,
		0x01, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0x07, 0x01, 0x01, 0x01, 0x00, 0x00, 0x7F, 0xFF,
		0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0xFF,
		0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x0F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x8F,
		0x8F, 0x9F, 0xBF, 0xFF, 0xFF, 0xC3, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC,
		0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x01, 0x03, 0x03, 0x03,
		0x03, 0x03, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01,
		0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03, 0x00, 0x00,
		0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x03,
		0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F,
		0x87, 0xC7, 0xF7, 0xFF, 0xFF, 0x1F, 0x1F, 0x3D, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0x7C, 0x7D, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x00, 0x30, 0x30, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0xC0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F,
		0x0F, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0,
		0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00,
		0x00, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x0E, 0xFC, 0xF8, 0x00, 0x00, 0xF0, 0xF8, 0x1C, 0x0E,
		0x06, 0x06, 0x06, 0x0C, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFC,
		0xFE, 0xFC, 0x00, 0x18, 0x3C, 0x7E, 0x66, 0xE6, 0xCE, 0x84, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0x06,
		0x06, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x06, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0xC0, 0xF8,
		0xFC, 0x4E, 0x46, 0x46, 0x46, 0x4E, 0x7C, 0x78, 0x40, 0x18, 0x3C, 0x76, 0xE6, 0xCE, 0xCC, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x0F, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00,
		0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C,
		0x18, 0x18, 0x0C, 0x06, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x01, 0x0F, 0x0E, 0x0C, 0x18, 0x0C, 0x0F,
		0x07, 0x01, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00,
		0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x07,
		0x07, 0x0C, 0x0C, 0x18, 0x1C, 0x0C, 0x06, 0x06, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*
 * OLEDModule()
 * Default constructor that will initialize the basic utilities used by the display driver.
 * Displays the buffers containing bitmap images to the screen.
 */
OLEDModule::OLEDModule(){
	i2c.init(100); //speed = 100 KHz
	if(i2c.checkDeviceResponse(_i2caddr)){
		u0_dbg_printf("[OLED]: Display I2C Protocol Initialized!\n");
		initDisplay();				//Set up the display
		u0_dbg_printf("[OLED]: Display Fully Initialized!\n");

		showAltDisplay(1);
		delay_ms(2000);				//2 second delay
		clearDisplay();

		invertDisplay(true);		//Invert for easy readability
		showAltDisplay(0);
		delay_ms(5000);			//15 second delay
		invertDisplay(false);		//Set display back to normal

		clearDisplay();
	}
	else{
		u0_dbg_printf("[OLED]: Display is NOT ready for I2C interfacing!\n\n");
	}
}

/*
 * initDisplay()
 * Issues the necessary commands for initialization of the display.
 *
 * @param vccstate operating voltage of the display module
 * @param i2caddr address of the module on I2C bus
 */
void OLEDModule::initDisplay(uint8_t vccstate, uint8_t i2caddr){
	_vccstate = vccstate;			//Power settings for the module
	_i2caddr = i2caddr;				//Device I2C Address

	//Initialize sequence
	//See SSD1306 datasheet for required codes
	sendCommand(SSD1306_SET_DISPLAY_OFF);				//0xAE

	sendCommand(SSD1306_SET_DISPLAY_CLK_DIV);			//0xD5
	sendCommand(0x80);									//0x80

	sendCommand(SSD1306_SET_MULTIPLEX_RATIO);			//0xA8
	sendCommand(SSD1306_DISPLAY_HEIGHT - 1);			//0x63

	sendCommand(SSD1306_SET_DISPLAY_OFFSET);			//0xD3
	sendCommand(0x0);									//0x00

	sendCommand(SSD1306_SET_DISPLAY_START_LINE | 0x0);	//0x40

	sendCommand(SSD1306_SET_CHARGE_PUMP);				//0x8D
	if(_vccstate == SSD1306_EXTERNALVCC){
		sendCommand(0x10);
	}
	else{
		sendCommand(0x14);
	}

	sendCommand(SSD1306_SET_MEMORY_MODE);				//0x20
	sendCommand(0x00);									//0x00

	sendCommand(SSD1306_SET_SEGMENT_REMAP | 0x1);		//0xA0
	sendCommand(SSD1306_SET_COM_SCAN_DIR_DEC);			//0xC8

	sendCommand(SSD1306_SET_COM_PINS);					//0xDA
	sendCommand(0x12);

	sendCommand(SSD1306_SET_CONTRAST);					//0x81
	if(_vccstate == SSD1306_EXTERNALVCC){
		sendCommand(0x9F);
	}
	else{
		sendCommand(0xCF);
	}

	sendCommand(SSD1306_SET_PRECHARGE_PERIOD);			//0xD9
	if(_vccstate == SSD1306_EXTERNALVCC){
		sendCommand(0x22);
	}
	else{
		sendCommand(0xF1);
	}

	sendCommand(SSD1306_SET_VCOM_DESELECT_LEVEL);		//0xDB
	sendCommand(0x40);

	sendCommand(SSD1306_DISPLAY_ALLON_RESUME_RAM);		//0xA4
	sendCommand(SSD1306_SET_DISPLAY_NORMAL);			//0xA6

	sendCommand(SSD1306_SET_DISPLAY_ON);				//Finally turn on the display
}

/*
 * invertDisplay()
 * Issues the command to invert colors on display or leave as normal.
 *
 * @param foo condition to set display to invert or normal
 */
void OLEDModule::invertDisplay(bool foo){
	if(foo){
		sendCommand(SSD1306_SET_DISPLAY_INVERT);
	}
	else{
		sendCommand(SSD1306_SET_DISPLAY_NORMAL);
	}
}

/*
 * sendCommand()
 * Helper function that sends a hex code to the display module.
 * Commands are sent to the 0x00 register of the module.
 *
 * @param cmd the command to be issued to the module over I2C write.
 */
void OLEDModule::sendCommand(uint8_t cmd){
	if(i2c.getInstance().writeReg(_i2caddr, 0, cmd)){
		//Printing each transfer slows down the system
		//u0_dbg_printf("[i2c command]: %x 0x00, %x\n", _i2caddr, cmd);
	}
	return;
}

/*
 * sendData()
 * Helper function that sends a hex data to the display module.
 * Data entries are sent to the 0x40 register of the module.
 *
 * @param data the data to be sent to the module over I2C write.
 */
void OLEDModule::sendData(uint8_t data){
	if(i2c.getInstance().writeReg(_i2caddr, 0x40, data)){
		//Printing each transfer slows down the system
		//u0_dbg_printf("[i2c data]: 0x40, %x\n", cmd);
	}
	return;
}

/*
 * prepareDisplayAddresses()
 * Issues the necessary commands to organize the displays alignment.
 */
void OLEDModule::prepareDisplayAddresses(){
	//Set the display to contain 128 columns
	sendCommand(SSD1306_SET_COL_ADDR);				//0x21
	sendCommand(0);									//Column start address
	sendCommand(SSD1306_DISPLAY_WIDTH - 1);				//Column end address
	//Set the display to contain 8 pages (rows)
	sendCommand(SSD1306_SET_PAGE_ADDR);				//0x22
	sendCommand(0);									//Page start address
	sendCommand((SSD1306_DISPLAY_HEIGHT / 8) - 1);		//Page end address
}

/*
 * showAltDisplay()
 * Selects a buffer to display based on given input.
 *
 * @param choice condition that selects a buffer
 */
void OLEDModule::showAltDisplay(uint8_t choice){
	//Prepare the display
	prepareDisplayAddresses();
	if(choice){
		//Display the Adafruit emblem
		sendBufferToDisplay(buffer);
	}
	else{
		//Display the SJSU emblem
		sendBufferToDisplay(spartanLogo);
	}
}

/*
 * showDisplay()
 * Displays the default buffer
 */
void OLEDModule::showDisplay(){
	//Prepare the display
	prepareDisplayAddresses();
	//Display the buffer
	sendBufferToDisplay(buffer);
}

/*
 * sendBufferToDisplay()
 * Loops through each element in the display and issues a data from the buffer to that cell.
 *
 * @param *buff buffer that is to be displayed on the screen
 */
void OLEDModule::sendBufferToDisplay(uint8_t *buff){
	uint16_t i;

	for(i = 0; i < ((SSD1306_DISPLAY_WIDTH*SSD1306_DISPLAY_HEIGHT)/8); i++){
		sendData(buff[i]);
	}
}

/*
 * displayString()
 * Parses a string and sends each character to an entry in the display.
 * Where the string is placed is controlled by input parameters
 *
 * @param page		the page (row) to place the message in
 * @param column	the column to start the message in
 * @param *message	the message to be written to display
 */
void OLEDModule::displayString(uint8_t page, uint8_t column, char *message){
	uint8_t offset = 32; 		//ASCII offset of 32 since codes 0-31 are non-printing
	uint8_t x = 0;
	uint8_t y = 0 ;
	unsigned char letter;

	//Iterate through each character in the string...
	while(message[x] != 0){
		letter = message[x];
		//Map an ASCII character to an entry in the buffer...
		for(y = 0; y < 5; y++){
			buffer[y + ((page * 128) + (column + (5 * x)))] = letterBank[letter - offset][y];
		}
		x++;
	}
}

/*
 * clearDisplay()
 * Clears the buffer with all 0's and then writes to the display.
 */
void OLEDModule::clearDisplay(){
	memset(buffer, 0,(SSD1306_DISPLAY_WIDTH * SSD1306_DISPLAY_HEIGHT / 8));
	showDisplay();
}
